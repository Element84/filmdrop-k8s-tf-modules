# This workflow sets up Testkube Kubernetes Tests

name: Testkube Kubernetes Tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

permissions:
  contents: read

jobs:
  testkube:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Create k3d Cluster
        uses: nolar/setup-k3d-k3s@v1
        with:
          k3d-args: --no-lb

      - name: Configuring kube context and getting cluster info
        run: |
          export KUBECONFIG=${HOME}/.kube/config
          kubectl cluster-info
          kubectl get pods -n kube-system
          kubectl get nodes
          echo "kubeconfig-file-location:" $KUBECONFIG
          echo "current-context:" $(kubectl config current-context)
          export KUBE_CONFIG_CONTEXT=$(kubectl config current-context)
          echo "kubernetes_config_file=\"$KUBECONFIG\"" >> min.tfvars
          echo "kubernetes_config_context=\"$KUBE_CONFIG_CONTEXT\"" >> min.tfvars

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="min.tfvars" -out out.tfplan

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'pull_request'
        run: terraform apply -input=false out.tfplan

      - name: Waiting for SWOOP pods
        run: |
          kubectl wait --for=condition=ready --timeout=30m pod -n db -l app=postgres
          kubectl wait --for=condition=ready --timeout=30m pod -n io -l app=minio
          kubectl wait --for=condition=ready --timeout=30m pod -n swoop -l app=swoop-api

      - name: Checkout swoop repo
        uses: actions/checkout@master
        with:
          repository: Element84/swoop
          path: swoop

      - name: Setup MinIO
        run: |
          kubectl port-forward -n io svc/minio 9000:9000 &
          curl https://dl.min.io/client/mc/release/linux-amd64/mc \
            --create-dirs \
            -o $HOME/minio-binaries/mc
          chmod +x $HOME/minio-binaries/mc
          export PATH=$PATH:$HOME/minio-binaries/
          export MINIO_ACCESS_KEY=`helm get values minio -n io -a -o json | jq -r .minio.service.accessKeyId | base64 --decode`
          export MINIO_SECRET_KEY=`helm get values minio -n io -a -o json | jq -r .minio.service.secretAccessKey | base64 --decode`
          mc alias set swoopminio http://127.0.0.1:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
          mc cp --recursive swoop/tests/fixtures/io/base_01/ swoopminio/swoop/execution/2595f2da-81a6-423c-84db-935e6791046e/

      - name: Checkout swoop-db repo
        uses: actions/checkout@master
        with:
          repository: Element84/swoop-db
          path: swoop-db

      - name: Setup Postgres
        run: |
          kubectl port-forward -n db svc/postgres 5432:5432 &
          sudo apt update
          sudo apt install postgresql postgresql-contrib
          export PGHOST="127.0.0.1"
          export PGUSER="`helm get values postgres -n db -a -o json | jq -r .postgres.service.dbUser | base64 --decode`"
          export PGPASSWORD="`helm get values postgres -n db -a -o json | jq -r .postgres.service.dbPassword | base64 --decode`"
          export PGPORT="`helm get values postgres -n db -a -o json | jq -r .postgres.service.port`"
          export PGDATABASE="`helm get values postgres -n db -a -o json | jq -r .postgres.service.dbName`"
          export PGAUTHMETHOD="trust"
          psql -p $PGPORT -U $PGUSER $PGDATABASE  < swoop-db/src/swoop/db/migrations/00000_base_schema.up.sql
          psql -p $PGPORT -U $PGUSER $PGDATABASE  < swoop-db/src/swoop/db/fixtures/base_01.sql

      - name: Installing Testkube
        run: |
          wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add -
          echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y testkube
          kubectl testkube install --no-confirm
          kubectl wait --for=condition=ready --timeout=30m pod -n testkube -l app.kubernetes.io/instance=testkube
          kubectl port-forward -n testkube svc/testkube-api-server 8088:8088 &
          testkube config api-uri http://127.0.0.1:8088/v1

      - name: Create Testkube Tests
        run: |
          testkube create test --namespace testkube --name swoop-api-root-test --type curl/test --test-content-type git-file --git-uri https://github.com/Element84/swoop.git --git-branch hm/testkube --git-path tests/testkube/curl/swoop-api-root-test.json --variable apiHost=swoop-api.swoop:8000
          testkube create test --namespace testkube --name swoop-api-jobs-test --type curl/test --test-content-type git-file --git-uri https://github.com/Element84/swoop.git --git-branch hm/testkube --git-path tests/testkube/curl/swoop-api-jobs-test.json --variable apiHost=swoop-api.swoop:8000
          testkube create test --namespace testkube --name swoop-api-payload-input-test --type curl/test --test-content-type git-file --git-uri https://github.com/Element84/swoop.git --git-branch hm/testkube --git-path tests/testkube/curl/swoop-api-payload-input-test.json --variable apiHost=swoop-api.swoop:8000

      - name: Running Testkube Tests
        run: |
          testkube run test --watch swoop-api-root-test
          testkube run test --watch swoop-api-jobs-test
          testkube run test --watch swoop-api-payload-input-test
