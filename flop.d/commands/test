#!/usr/bin/env bash

set -euo pipefail

. "${FLOP_LIB}"
find_this "${BASH_SOURCE[0]}" 


main () {
    local USAGE=$(cat <<EOF
USAGE: ${FLOP_CLI} ${FLOP_COMMAND} FLOP_CLUSTER_NAME [ -- TEST OPTS/ARGS ]

Run tests against the specified cluster.
All options/arguments provided after -- will be passed to test runner.

Command arguments:
    FLOP_CLUSTER_NAME  name of the cluster to run terraform against

Supported options:
    -h|--help          show this message
EOF
    )

    . "$FLOP_GETOPT" -n "${FLOP_CLI}: ${FLOP_COMMAND}" -o "h" -l "help" -- "$@"

    local arg i=0
    while [ "$i" -lt "${#OPTS[@]}" ]; do
        arg="${OPTS[$i]}"
        i=$((i+1))
        case $arg in
            -h|--help)
                fatal "$USAGE" 0
                ;;
            *)
                fatal "${FLOP_CLI}: ${FLOP_COMMAND}: unknown option: '$arg'" 1
                ;;
        esac
    done

    # handle unknown arguments (allowing 'help')
    i=0
    while [ "$i" -lt "${#ARGS[@]}" ]; do
        arg="${ARGS[$i]}"
        i=$((i+1))
        [ "$arg" == "help" ] && fatal "$USAGE" 0
    done

    FLOP_CLUSTER="${ARGS[0]:?"must provide the cluster name"}"
    set_vars "${FLOP_CLUSTER}"

    failure=0
    for testfile in "${LIB_DIR}/tests/"*; do
        ! [ -d "${testfile}" ] || continue

        [ -x "${testfile}" ] || {
            echo2 "Not executable, skipping '${testfile}'..."
            continue
        }

        echo2 "\n 🦺 Running test '$(basename "${testfile}")...'"
        $testfile >&2 || {
            echo2 " ⚠️  Test failed!"
            failure=1
            continue
        }
        echo2 " 👍 Great success! 👍 "
    done;

    exit ${failure}
}


main "$@"
